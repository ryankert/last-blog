---
layout: article
title: leetcode 1354. Construct Target Array With Multiple Sums
tags: leetcode Algorithm
key: 2022-05-31-leetcode 1354. Construct Target Array With Multiple Sums
---

### Construct Target Array With Multiple Sums

[leetcode 1354. Construct Target Array With Multiple Sums](https://leetcode.com/problems/construct-target-array-with-multiple-sums/)

> if we don't use qriority queue, it'll TLE. like this:

```cpp
class Solution {
public:
    bool isPossible(vector<int>& target) {
        // find sum
        int sum = 0;
        for(int i : target)
            sum += i;
        
        // max_element(target.beign(), target.end())
        auto it = max_element(target.begin(), target.end());
        while(*it != 1)
        {
            sum -= *it;
            if(*it <= sum)
                return false;
            *it -= sum;
            sum += *it;
            it = max_element(target.begin(), target.end());
        }
        
        return true;
    }
};
```



> Runtime: 31 ms, faster than 100.00% of C++ online submissions for Construct Target Array With Multiple Sums.
Memory Usage: 28.5 MB, less than 91.61% of C++ online submissions for Construct Target Array With Multiple Sums.

I think it use a little bit of backtracking, but definitlely not recursive type of it. 
Rather, because it starts with all 1s' values, and it find a position of value, and replace it with the sum of all values.
for example: ```1,1,1``` to ```1,1,3```, replace the third element with the sum 3.
So, it's simple to say that it's find a element and add all element other than that element to that element.
Since all elements are positive integers, the selected element will be the largest element before the operation.
Then, we can substract the sum other than the greatest element to the greatest element to go backward a step.

>### Why we are using %
>the idea of % is that if we minus the greatest element with the sum of other elements, it might appears that the greatest element is still the largest elements. In that case, '%' does skip those bad testcases.  ```[1,10000000]```, for example.

```cpp
class Solution {
public:
    bool isPossible(vector<int>& target) {
        // find sum
        long sum = 0;
        for(int i : target)
            sum += i;
        
        // construct priority queue
        priority_queue<int>pq(target.begin(), target.end());
        
        while(true){
            // find the greatest value
            int a = pq.top(); pq.pop();

            sum -= a;
            
            // break rules
            if(a == 1 || sum == 1) 
                return true;
            if(a <= sum || sum == 0 || a % sum == 0)
                return false;
            
            // substract the 
            a %= sum;
            sum += a;
            pq.push(a);
        }
        
        return true;
    }
};
```
